<?php


/**
 * This is an example (and default case) for a class that performs logging. It 
 * is attached to, but loosely coupled from the ccApp class. 
 *
 *
 *
 * @see http://logging.apache.org/log4php/docs
 * @see http://codefury.net/projects/klogger/
 * @see 
 */
class ccTrace
{
	protected $DefaultLevel = 9;// Default output level of detail
	protected $ThresholdLevel=5;
	protected $bHtml=FALSE;		// Format for HTML?
	protected $Output;			// Destination
	
	function out($msg, $bNoNewline=FALSE)
	{
		if ($this->Output)
			error_log($msg,3,$this->Output);
		elseif ($bNoNewline)
		{
			if ($this->bHtml)
				echo nl2br($msg);
			else
				echo $msg;
		}
		else
		{
			if ($this->bHtml)
				echo nl2br($msg).'<br/>'.PHP_EOL;
			else
				echo $msg.PHP_EOL;
		}
	} // out()

	static function showSource($file,$line=NULL)
	{
		echo <<<EOD
			<a href="#currentline">{$file}#$line<a><br/>
			<style type="text/css"> 
			.num { 
			float: left; 
			color: gray; 
			text-align: right; 
			margin-right: 3pt; 
			padding-right: 3pt; 
			border-right: 1px solid gray;} 
			</style> 
EOD;
		$linenos = range(1, count(file($file)));
		$linenos[$line-1] = '<b id="currentline" style="color:white; background:red">' . $linenos[$line-1] . '</b>';
		echo '<code class="num">', implode('<br/>',$linenos), '</code>'; 
		highlight_file($file); 
/*
	echo $file.'#'.$line.'<br/>';
		if ($line === NULL)
			highlight_file($file);
		else
		{
			$source = highlight_file($file, TRUE);
			$source= explode('<br />', $source);
			$width = strlen(count($source));
			foreach ($source as $lineno => $sline)
				$source[$lineno] = '<code style="padding-right:3px;margin-right:3px; color:black; border-right:1px solid gray;">'.str_replace(' ','&nbsp;',str_pad(($lineno+1), $width)).'</code>'.$sline;
			$source[$line-1] = '<b id="currentline" style="width:100%; background:rgb(200,200,200)">'.$source[$line-1].'</b>';
			print_r(implode('<br/>',$source));
		}
*/
	}
	
	/**
	 * Display traceback. 
	 * @param Array $trace is the trace-back array as generated by
	 *        debug_backtrace() and Exception::getTrace().
	 * @todo Consider moving to separate Trace class
	 */
	static function showTrace(Array $trace, $bNoHtml=FALSE)
	{
// array_shift($trace);	// Ignore this method.
// echo '<pre>';
// echo __METHOD__.' ';
// var_dump($trace);
		$entry = 1;
		$nl = $bNoHtml ? PHP_EOL : '<br/>'.PHP_EOL;
		foreach ($trace as $key => $line)
		{
			if (isset($line['file']) && isset($line['line']))
			{
				echo ($entry++).'. '.self::showTraceline($line,$bNoHtml).$nl;
				if (   $line['function'] == 'call_user_func'
					 || $line['function'] == 'call_user_func_array')
				{
					echo '&nbsp;&nbsp;&nbsp;&nbsp;'.self::showTraceline($trace[$key-1]).$nl;
				}
			}
		}
//		self::showSource($trace[0]['file'],$trace[0]['line']);
// echo '</pre>';
	} // showTrace()
	
	/**
	 * Format a line of the trace stack. 
	 *
	 * @see debug_traceback() http://us.php.net/manual/en/function.debug-backtrace.php
	 * @see Exception::getTrace() http://us.php.net/manual/en/exception.gettrace.php
	 * @todo Consider moving to separate Trace class
	 */
	static function showTraceLine($line, $bNoHtml=FALSE)
	{
// echo __METHOD__.' ';
// var_dump($line);
// if (is_string($line))
	// return $line.'<br/>';
		if ($bNoHtml)
		{
			$bb = $eb = 
			$bi = $ei = 
			$btt = $ett = '';
			list ($rarr,$ldquo,$rdquo,$hellip,$nl) = 
			array('->', '"',   '"',   '...',  PHP_EOL);
		}
		else
		{
			list ($bb,  $eb,   $bi,  $ei,   $btt,  $ett,   $rarr,   $ldquo,$rdquo,   $hellip,   $nl) =
			array('<b>','</b>','<i>','</i>','<tt>','</tt>','&rarr;','&ldquo;','&rdquo;','&hellip;','<br/>'.PHP_EOL);
		}
	
		$out = '';
		if (isset($line['class']))
			$out .= $bb.$line['class'].$eb;
		if (isset($line['object']) 
			&& get_class($line['object']) != $line['class'])
			$out .= $bi.'('.get_class($line['object']).')'.$ei;
		if (isset($line['type']))
			$out .= ($line['type'] == '->' ? $rarr : $line['type']);
		$out .= $bb.$line['function'].$eb.'(';
		$first = true;
		foreach ($line['args'] as $arg)
		{
			if (!$first)
				$out .= ',';
			else
				$first = false;
			$out .= $btt;
			if ($arg === NULL)
				$out .= 'null';
			elseif (is_object($arg))
				$out .= get_class($arg);
			elseif (is_string($arg))
				$out .= $ett.$ldquo.$bi.$arg.$ei.$rdquo.$btt;
			elseif (is_array($arg))
			{
				if ((   $line['function'] == 'call_user_func'
					 || $line['function'] == 'call_user_func_array')
					&& count($arg) == 2)
				{
					$out .= get_class($arg[0]);
					if (is_object($arg[0]))
						$out .= $rarr;
					else 
						$out .= '::';
					$out .= $arg[1].'()'.$ett.','.$hellip;
					break;
				}
				else
				{
				$out .= 'Array(';
				$firstarg = true;
				foreach ($arg as $argkey => $argval)
				{
					if (!$firstarg)
						$out .= ',';
					else
						$firstarg = false;
					$out .= $argkey.$rarr;
					if ($argval === NULL)
						$out .= 'null';
					elseif (is_object($argval))
						$out .= get_class($argval);
					elseif (is_string($argval))
						$out .= $ett.$ldquo.$bi.$argval.$ei.$rdquo.$btt;
					else
						$out .= $argval;
				}
				$out .= ')';
				}
			}
			else
				$out .= $arg;
			$out .= $ett;
		}
		$out .= ')';
		if (isset($line['file']))
			$out .= ' in '.$btt.dirname($line['file']).'/'.$ett.$bb.basename($line['file']).$eb.'#'.$line['line'];
		// echo ') in '.$btt.dirname($line['file']).'/'.$bb.basename($line['file']).$eb.'#'.$ett.$line['line'].'<br/>';
// var_dump($line['args']);
		// echo '&nbsp;&nbsp;&nbsp;'.implode(',',$line['args']).'<br/>';
		return $out;
	} // showTraceLine()
	
	/**
	 * options: HTML, log, stderr, stdout, formatted, timestamp
	 */
	static function tr($msg='')
	{
		if (!(ccApp::$_me->devMode & ccApp::MODE_DEVELOPMENT))
			return;
		$trace = debug_backtrace(
				// DEBUG_BACKTRACE_IGNORE_ARGS
				// | 
				// DEBUG_BACKTRACE_PROVIDE_OBJECT
				// ,2);
				// TRUE
				);
// echo '<pre>';
// echo __METHOD__.' ';
// var_dump($trace);
//		error_log( ccTrace::showTraceLine($trace[0],TRUE) );
//echo $trace[0]['file'].'#'.$trace[0]['line'].' '.$trace[1]['class'].'::'.$trace[1]['function'].'<br/>';
		if (FALSE)
		{
			$bb = $eb = 
			$bi = $ei = 
			$btt = $ett = '';
			list ($rarr,$ldquo,$rdquo,$hellip,$nl) = 
			array('->', '"',   '"',   '...',  PHP_EOL);
		}
		else
		{
			list ($bb,  $eb,   $bi,  $ei,   $btt,  $ett,   $rarr,   $ldquo,$rdquo,   $hellip,   $nl) =
			array('<b>','</b>','<i>','</i>','<tt>','</tt>','&rarr;','&ldquo;','&rdquo;','&hellip;','<br/>'.PHP_EOL);
		}
		$out = '';
		if (isset($trace[1]['class']))
			$out .= $bb.$trace[1]['class'].$eb;
		if (isset($trace[1]['object']) 
			&& get_class($trace[1]['object']) != $trace[1]['class'])
			$out .= $bi.'('.get_class($trace[1]['object']).')'.$ei;
		if (isset($trace[1]['type']))
			$out .= ($trace[1]['type'] == '->' ? $rarr : $trace[1]['type']);
		$out .= $bb.$trace[1]['function'].$eb.'()#'.$trace[0]['line'];

		if ($msg === '' || $msg === NULL || is_string($msg))
			echo $out.' '.$msg.$nl;
		else
		{
echo '<pre>';
			echo $out.' ';
			print_r($msg);
			echo PHP_EOL;
echo '</pre>';
		}
		// echo $msg.'<br/>'.PHP_EOL;
		// echo '<br/>'.PHP_EOL;
//		ccTrace::showTrace($trace);
		// echo '<pre>';
		// debug_print_backtrace();
		// echo '</pre>';
	} // tr()
		
} // class ccTrace